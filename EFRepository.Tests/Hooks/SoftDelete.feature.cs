// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EFRepository.Tests.Hooks
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SoftDeleteFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SoftDelete.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SoftDelete", @"As a programmer  <br />
In order to update IsDelete property in data class instead of delete data in the database	<br />
I would like to use soft delete hook to handle soft delete logic <br />

How to use?
--------

1. Create data class inherits **ISoftDelete**
		
		public class SoftDeleteData : IEntity<int>, ISoftDelete
		{        
			[Key]
			public int Id { get; set; }
       
			public string Content { get; set; }
      
			public bool IsDelete { get; set; }
		}	

1. Create repository inherits **Generic repository** and register **Soft delete hook**

		public class SoftDeleteRepository : GenericRepository<int, SoftDeleteData>, IRepository<int, SoftDeleteData>
		{        
			public SoftDeleteRepository(MyDbContext context)
				: base(context)
			{
				this.RegisterPostLoadHook(new SoftDeletePostLoadHook<MyData>());
				this.RegisterPostActionHook(new SoftDeletePostActionHook<MyData>());
			}
		}

1. Use repository

		using(var dbContext = new MyDbContext())
		{
			var repository = new SoftDeleteRepository(dbContext);

			//// Will update IsDelete to true
			repository.Delete(1);

			or

			//// Will only get data with IsDelete=false
			var myData = repository.Get(1);
		}

Scenarios
--------", ProgrammingLanguage.CSharp, new string[] {
                        "Hook"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "SoftDelete")))
            {
                EFRepository.Tests.Hooks.SoftDeleteFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get datalist from database should filter IsDelete=true if data is soft delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SoftDelete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Hook")]
        public virtual void GetDatalistFromDatabaseShouldFilterIsDeleteTrueIfDataIsSoftDelete()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get datalist from database should filter IsDelete=true if data is soft delete", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content",
                        "IsDelete"});
            table1.AddRow(new string[] {
                        "1",
                        "TestData",
                        "true"});
            table1.AddRow(new string[] {
                        "2",
                        "TestData 2",
                        "false"});
#line 54
 testRunner.Given("database has soft delete datas", ((string)(null)), table1, "Given ");
#line 58
 testRunner.And("Register soft delete hook in generic repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.When("I use generic repository get data list from database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content"});
            table2.AddRow(new string[] {
                        "2",
                        "TestData 2"});
#line 60
 testRunner.Then("the data list I get should be", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get datalist from database with condition content should contains \"2\" should filt" +
            "er IsDelete=true if data is soft delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SoftDelete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Hook")]
        public virtual void GetDatalistFromDatabaseWithConditionContentShouldContains2ShouldFilterIsDeleteTrueIfDataIsSoftDelete()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get datalist from database with condition content should contains \"2\" should filt" +
                    "er IsDelete=true if data is soft delete", ((string[])(null)));
#line 64
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content",
                        "IsDelete"});
            table3.AddRow(new string[] {
                        "1",
                        "TestData",
                        "true"});
            table3.AddRow(new string[] {
                        "2",
                        "TestData 2",
                        "false"});
            table3.AddRow(new string[] {
                        "3",
                        "TestData 2",
                        "true"});
#line 65
 testRunner.Given("database has soft delete datas", ((string)(null)), table3, "Given ");
#line 70
 testRunner.And("test datas content field should contains \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.And("Register soft delete hook in generic repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.When("I use generic repository get data list with condition from database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content"});
            table4.AddRow(new string[] {
                        "2",
                        "TestData 2"});
#line 73
 testRunner.Then("the data list I get should be", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get data from database should filter IsDelete=true if data is soft delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SoftDelete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Hook")]
        public virtual void GetDataFromDatabaseShouldFilterIsDeleteTrueIfDataIsSoftDelete()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get data from database should filter IsDelete=true if data is soft delete", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content",
                        "IsDelete"});
            table5.AddRow(new string[] {
                        "1",
                        "TestData",
                        "true"});
            table5.AddRow(new string[] {
                        "2",
                        "TestData 2",
                        "false"});
#line 78
 testRunner.Given("database has soft delete datas", ((string)(null)), table5, "Given ");
#line 82
 testRunner.And("Register soft delete hook in generic repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.When("I use generic repository get data from database by id \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.Then("the data list I get should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get data from database with condition content should contains \"2\" should filter I" +
            "sDelete=true if data is soft delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SoftDelete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Hook")]
        public virtual void GetDataFromDatabaseWithConditionContentShouldContains2ShouldFilterIsDeleteTrueIfDataIsSoftDelete()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get data from database with condition content should contains \"2\" should filter I" +
                    "sDelete=true if data is soft delete", ((string[])(null)));
#line 86
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content",
                        "IsDelete"});
            table6.AddRow(new string[] {
                        "1",
                        "TestData",
                        "true"});
            table6.AddRow(new string[] {
                        "2",
                        "TestData 2",
                        "true"});
            table6.AddRow(new string[] {
                        "3",
                        "TestData 2",
                        "false"});
#line 87
 testRunner.Given("database has soft delete datas", ((string)(null)), table6, "Given ");
#line 92
 testRunner.And("test datas content field should contains \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And("Register soft delete hook in generic repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.When("I use generic repository get data from database with conditon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content"});
            table7.AddRow(new string[] {
                        "3",
                        "TestData 2"});
#line 95
 testRunner.Then("the data list I get should be", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Delete data will be replaced by update IsDelete field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SoftDelete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Hook")]
        public virtual void DeleteDataWillBeReplacedByUpdateIsDeleteField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete data will be replaced by update IsDelete field", ((string[])(null)));
#line 99
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content",
                        "IsDelete"});
            table8.AddRow(new string[] {
                        "1",
                        "TestData",
                        "false"});
            table8.AddRow(new string[] {
                        "2",
                        "TestData 2",
                        "false"});
#line 100
 testRunner.Given("database has soft delete datas", ((string)(null)), table8, "Given ");
#line 104
 testRunner.And("Register soft delete hook in generic repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.When("I use generic repository delete data with id \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
 testRunner.And("I save the changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content",
                        "Is delete"});
            table9.AddRow(new string[] {
                        "1",
                        "TestData",
                        "true"});
            table9.AddRow(new string[] {
                        "2",
                        "TestData 2",
                        "false"});
#line 107
 testRunner.Then("database should exists test datas", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
