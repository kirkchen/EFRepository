// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EFRepository.Tests.Hooks
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SystemInfoFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SystemInfo.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SystemInfo", "As a programmer <br />\r\nIn order to auto assign required system information when " +
                    "insert or update data <br />\r\nI would like to use use system info hook to handle" +
                    " assign system infomation logic <br />\r\n\r\nHow to use?\r\n--------\r\n\r\n1. Create dat" +
                    "a class inherits **ISystemInfo**\r\n\t\t\r\n\t\tpublic class SystemInfoData : IEntity<in" +
                    "t>, ISystemInfo\r\n\t\t{        \r\n\t\t\t[Key]\r\n\t\t\tpublic int Id { get; set; }\r\n       \r" +
                    "\n\t\t\tpublic string Content { get; set; }\r\n      \r\n\t\t\tpublic DateTime CreatedAt { " +
                    "get; set; }\r\n\r\n\t        public string CreatedBy { get; set; }\r\n\r\n\t\t\tpublic DateT" +
                    "ime UpdatedAt { get; set; }\r\n\r\n\t\t\tpublic string UpdatedBy { get; set; }\r\n\t\t}\t\r\n\r" +
                    "\n1. Create **UserHelper** class to get current username in your system\r\n\r\n\t\tpubl" +
                    "ic class UserHelper: IUserHelper\r\n\t\t{\r\n\t\t\tpublic string GetUserName()\r\n\t\t\t{\r\n\t\t\t" +
                    "\t//// Implement your system user name logic\r\n\t\t\t\treturn HttpContext.Current.User" +
                    ".Name;\r\n\t\t\t}\r\n\t\t}\r\n\r\n1. Create repository inherits **Generic repository** and re" +
                    "gister **System info hook**\r\n\r\n\t\tpublic class SystemInfoRepository : GenericRepo" +
                    "sitory<int, SystemInfoData>, IRepository<int, SystemInfoData>\r\n\t\t{        \r\n\t\t\tp" +
                    "ublic SystemInfoRepository(MyDbContext context)\r\n\t\t\t\t: base(context)\r\n\t\t\t{\r\n\t\t\t\t" +
                    "this.Repository.RegisterPostActionHook(new SystemInfoPostActionHook<SystemInfoDa" +
                    "ta>(new UserHelper(), new DatetimeHelper()));\r\n\t\t\t}\r\n\t\t}\r\n\r\n1. Use repository\r\n\r" +
                    "\n\t\tusing(var dbContext = new MyDbContext())\r\n\t\t{\r\n\t\t\tvar repository = new SoftDe" +
                    "leteRepository(dbContext);\r\n\r\n\t\t\t//// Will auto update required system info fiel" +
                    "d\r\n\t\t\trepository.Add(myData);\r\n\r\n\t\t\tor\r\n\r\n\t\t\t//// Will auto update required syst" +
                    "em info field\r\n\t\t\trepository.Update(myData);\r\n\t\t}\r\n\r\nScenarios\r\n--------", ProgrammingLanguage.CSharp, new string[] {
                        "Hook"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "SystemInfo")))
            {
                EFRepository.Tests.Hooks.SystemInfoFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add data into database should be success and auto assign system required infomati" +
            "on")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SystemInfo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Hook")]
        public virtual void AddDataIntoDatabaseShouldBeSuccessAndAutoAssignSystemRequiredInfomation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add data into database should be success and auto assign system required infomati" +
                    "on", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content"});
            table1.AddRow(new string[] {
                        "1",
                        "TestData"});
#line 70
 testRunner.Given("I have systemInfo datas", ((string)(null)), table1, "Given ");
#line 73
 testRunner.And("Current user is \"John\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.And("Current datetime is \"2016/08/05 16:00:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.And("Register system info hook in generic repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.When("I use generic repository to add data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.And("I save the changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content",
                        "CreatedAt",
                        "CreatedBy",
                        "UpdatedAt",
                        "UpdatedBy"});
            table2.AddRow(new string[] {
                        "1",
                        "TestData",
                        "2016/08/05 16:00:00",
                        "John",
                        "2016/08/05 16:00:00",
                        "John"});
#line 78
 testRunner.Then("database should exists test datas", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add datalist into database should be success and auto assign system required info" +
            "mation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SystemInfo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Hook")]
        public virtual void AddDatalistIntoDatabaseShouldBeSuccessAndAutoAssignSystemRequiredInfomation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add datalist into database should be success and auto assign system required info" +
                    "mation", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content"});
            table3.AddRow(new string[] {
                        "1",
                        "TestData"});
            table3.AddRow(new string[] {
                        "2",
                        "TestData 2"});
#line 83
 testRunner.Given("I have systemInfo datas", ((string)(null)), table3, "Given ");
#line 87
 testRunner.And("Current user is \"John\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.And("Current datetime is \"2016/08/05 16:00:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.And("Register system info hook in generic repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.When("I use generic repository to add datalist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 91
 testRunner.And("I save the changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content",
                        "CreatedAt",
                        "CreatedBy",
                        "UpdatedAt",
                        "UpdatedBy"});
            table4.AddRow(new string[] {
                        "1",
                        "TestData",
                        "2016/08/05 16:00:00",
                        "John",
                        "2016/08/05 16:00:00",
                        "John"});
            table4.AddRow(new string[] {
                        "2",
                        "TestData 2",
                        "2016/08/05 16:00:00",
                        "John",
                        "2016/08/05 16:00:00",
                        "John"});
#line 92
 testRunner.Then("database should exists test datas", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update data which is exists in database should be success and auto assign system " +
            "required infomation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "SystemInfo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Hook")]
        public virtual void UpdateDataWhichIsExistsInDatabaseShouldBeSuccessAndAutoAssignSystemRequiredInfomation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update data which is exists in database should be success and auto assign system " +
                    "required infomation", ((string[])(null)));
#line 97
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content",
                        "CreatedAt",
                        "CreatedBy",
                        "UpdatedAt",
                        "UpdatedBy"});
            table5.AddRow(new string[] {
                        "1",
                        "TestData",
                        "2016/08/05 16:00:00",
                        "John",
                        "2016/08/05 16:00:00",
                        "John"});
            table5.AddRow(new string[] {
                        "2",
                        "TestData 2",
                        "2016/08/05 16:00:00",
                        "John",
                        "2016/08/05 16:00:00",
                        "John"});
#line 98
 testRunner.Given("database has systemInfo datas", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content",
                        "CreatedAt",
                        "CreatedBy",
                        "UpdatedAt",
                        "UpdatedBy"});
            table6.AddRow(new string[] {
                        "1",
                        "TestData Modified",
                        "2016/08/05 16:00:00",
                        "John",
                        "2016/08/05 16:00:00",
                        "John"});
#line 102
 testRunner.And("the data I want to update is", ((string)(null)), table6, "And ");
#line 105
 testRunner.And("Current user is \"David\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.And("Current datetime is \"2016/08/06 09:00:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
 testRunner.And("Register system info hook in generic repository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.When("I use generic repository update data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 109
 testRunner.And("I save the changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Content",
                        "CreatedAt",
                        "CreatedBy",
                        "UpdatedAt",
                        "UpdatedBy"});
            table7.AddRow(new string[] {
                        "1",
                        "TestData Modified",
                        "2016/08/05 16:00:00",
                        "John",
                        "2016/08/06 09:00:00",
                        "David"});
            table7.AddRow(new string[] {
                        "2",
                        "TestData 2",
                        "2016/08/05 16:00:00",
                        "John",
                        "2016/08/05 16:00:00",
                        "John"});
#line 110
 testRunner.Then("database should exists test datas", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
